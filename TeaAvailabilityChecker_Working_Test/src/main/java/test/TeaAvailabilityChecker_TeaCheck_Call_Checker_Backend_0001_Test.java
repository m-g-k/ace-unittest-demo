package test;

import java.io.InputStream;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.NodeStub;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class TeaAvailabilityChecker_TeaCheck_Call_Checker_Backend_0001_Test {

	/*
	 * TeaAvailabilityChecker_TeaCheck_Call_Checker_Backend_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.5.0 on 10-Aug-2022 12:13:40
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void TeaAvailabilityChecker_TeaCheck_Call_Checker_Backend_TestCase_001() throws TestException {
		
		// Define the SpyObjectReference for the HTTP Request node
		SpyObjectReference httpRequestNodeReference = new SpyObjectReference().application("TeaAvailabilityChecker")
				.messageFlow("TeaCheck").node("Call Checker Backend");

		// Create a NodeStub to mock the backend
		NodeStub httpRequestNodeMock = new NodeStub(httpRequestNodeReference);
		
		// Create a Message Assembly for the message to return
		String messageAssemblyPath = "/TeaCheck_Call_Checker_Backend_0001_8fca4aed-7eea-45a1-87a6-162dbf8f13d7_output_data.mxml";
		TestMessageAssembly responseMessageAssembly = createMessageAssembly(messageAssemblyPath);
		httpRequestNodeMock.onCall().propagatesMessage("in", "out", responseMessageAssembly);
		httpRequestNodeMock.setStopAtOutputTerminal("out"); // do not call nodes after us in the flow
		
		// Define the SpyObjectReference for the compute node
		SpyObjectReference nodeComputeReference = new SpyObjectReference().application("TeaAvailabilityChecker")
				.messageFlow("TeaCheck").node("Convert JSON to XML");
		
		// Initialise a NodeSpy for the compute node
		NodeSpy computeNodeSpy = new NodeSpy(nodeComputeReference);
		
		// Propagate a message from the Compute node into the HTTP Request node
		messageAssemblyPath = "/TeaCheck_Convert_JSON_To_XML_output_data.mxml";
		TestMessageAssembly computeNodeOutputeMessageAssembly = createMessageAssembly(messageAssemblyPath);
		computeNodeSpy.propagate(computeNodeOutputeMessageAssembly, "out");
		
		// Assert the number of times that the node is called
		assertThat(httpRequestNodeMock, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(httpRequestNodeMock, terminalPropagateCountIs("out", 1));

		// Compare Output Message 1 at output terminal out
		try {
			TestMessageAssembly actualMessageAssembly = null;
			TestMessageAssembly expectedMessageAssembly = null;

			// Get the TestMessageAssembly object for the actual propagated message
			actualMessageAssembly = httpRequestNodeMock.propagatedMessageAssembly("out", 1);

			// Assert output message body data
			// Create a Message Assembly from the expected output mxml resource
			messageAssemblyPath = "/TeaCheck_Call_Checker_Backend_0001_8fca4aed-7eea-45a1-87a6-162dbf8f13d7_output_data.mxml";
			expectedMessageAssembly = createMessageAssembly(messageAssemblyPath);

			// Assert that the actual message tree matches the expected message tree
			assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly).ignoreTimeStamps().ignorePath("/Message/HTTPResponseHeader/Date",true));

		} catch (Exception ex) {
			throw new TestException("Failed to compare with expected message", ex);
		}

	}
	
	// Message Assembly Helper
	private static TestMessageAssembly createMessageAssembly(String assemblyPath) throws TestException {
	  // Create a Message Assembly from the input data file
	  try {
		InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(assemblyPath);
		if (messageStream == null) {
			throw new TestException("Unable to locate message assembly file: " + assemblyPath);
		}
		TestMessageAssembly responseAssembly = new TestMessageAssembly();
		responseAssembly.buildFromRecordedMessageAssembly(messageStream);
		return responseAssembly;
	  } catch (Exception ex) {
		throw new TestException("Failed to load message assembly from path: " + assemblyPath, ex);
	  }	
    }
	
}
